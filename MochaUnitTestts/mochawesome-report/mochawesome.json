{
  "stats": {
    "suites": 2,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-26T08:37:40.846Z",
    "end": "2023-08-26T08:37:40.900Z",
    "duration": 54,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "11e276ae-fbb4-40ae-8f3a-c7ac3907cb0e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70fc123c-6f94-4e8d-8397-33a645017919",
          "title": "Should sum the parameters passed to it and return the sum as a result",
          "fullFile": "F:\\My HomeTasks EPAM AM\\EPAM-RD3\\Common\\hometask_22_unit_testing\\homework\\Maria-Ulyanova\\test\\specs\\calculatorAdd.spec.js",
          "file": "\\test\\specs\\calculatorAdd.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Should sum the parameters passed to it and return the sum as a result\"",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result \"before each\" hook in \"Should sum the parameters passed to it and return the sum as a result\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = new Calculator();",
              "err": {},
              "uuid": "5157122a-e600-4a14-907d-6c02b0a4adb7",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Should sum the parameters passed to it and return the sum as a result\"",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result \"after each\" hook in \"Should sum the parameters passed to it and return the sum as a result\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = null;",
              "err": {},
              "uuid": "4f8183c2-d2eb-480f-a27d-551639e20654",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return 6 when called with numbers 2 and 4",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 6 when called with numbers 2 and 4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(2, 4)).to.be.equal(6);",
              "err": {},
              "uuid": "dd19c22a-dfe9-40eb-a2f2-13a59ac7c23e",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 4 when called with number 4",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 4 when called with number 4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(4)).to.equal(4)",
              "err": {},
              "uuid": "80bdad46-2738-4237-b515-20da3713c0ed",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 when colled with numbers 1, -1",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 0 when colled with numbers 1, -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(1, -1)).to.be.eql(0);",
              "err": {},
              "uuid": "eea77fc3-3c4d-4f09-b79e-7cb51c5a54b7",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when called with \"1\"",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should throw error when called with \"1\"",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculator.add(\"1\")).to.throw('Invalid argument: all arguments must be numbers')\n  .that.has.property('message', 'Invalid argument: all arguments must be numbers');",
              "err": {},
              "uuid": "b54d00e6-a8f1-4175-ae1a-aa1b76a8fb0d",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return \"No arguments provided\" when called with no arguments",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return \"No arguments provided\" when called with no arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculator.add()).to.throw('No arguments provided');",
              "err": {},
              "uuid": "83e6fd17-f9a2-49a4-9362-62624885fbf6",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 16 when adding multiple positive numbers 1, 2, 3, 4 ,6",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 16 when adding multiple positive numbers 1, 2, 3, 4 ,6",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(1, 2, 3, 4, 6)).to.eql(16);",
              "err": {},
              "uuid": "743e9dab-b28e-41c0-b281-030fda6180b3",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 when called with 0.01, 0.3, 0.04, 0.5, 0.15",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 1 when called with 0.01, 0.3, 0.04, 0.5, 0.15",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(0.01, 0.3, 0.04, 0.5, 0.15)).to.eql(1);",
              "err": {},
              "uuid": "76a01912-df69-462a-82e5-3ea621512ea6",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return -10 when called with negative numbers -1, -3, -6",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return -10 when called with negative numbers -1, -3, -6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(-1, -3, -6)).to.be.equal(-10);",
              "err": {},
              "uuid": "84458bc6-3281-466c-bacc-3eeb17fed511",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 when called with 100 zeros",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return 0 when called with 100 zeros",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const zeros = Array(100).fill(0);\nexpect(calculator.add(...zeros)).to.equal(0);",
              "err": {},
              "uuid": "c61bc699-7ea4-488c-973e-9e5ce00946a5",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when called with non-numeric arguments",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should throw error when called with non-numeric arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculator.add(\"2\", 3)).to.throw('Invalid argument: all arguments must be numbers');",
              "err": {},
              "uuid": "55038125-4da9-40f6-98ed-adb44c27a8e5",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return the correct sum when called with an array of numbers",
              "fullTitle": "Should sum the parameters passed to it and return the sum as a result Should return the correct sum when called with an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbersToSum = [0, 10, 30, 12, 18, 0.5, -0.5, -20, 50];\nconst sum = calculator.add(...numbersToSum);\nexpect(sum).to.equal(100);",
              "err": {},
              "uuid": "2f048898-aba2-475c-871e-953226c17820",
              "parentUUID": "70fc123c-6f94-4e8d-8397-33a645017919",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd19c22a-dfe9-40eb-a2f2-13a59ac7c23e",
            "80bdad46-2738-4237-b515-20da3713c0ed",
            "eea77fc3-3c4d-4f09-b79e-7cb51c5a54b7",
            "b54d00e6-a8f1-4175-ae1a-aa1b76a8fb0d",
            "83e6fd17-f9a2-49a4-9362-62624885fbf6",
            "743e9dab-b28e-41c0-b281-030fda6180b3",
            "76a01912-df69-462a-82e5-3ea621512ea6",
            "84458bc6-3281-466c-bacc-3eeb17fed511",
            "c61bc699-7ea4-488c-973e-9e5ce00946a5",
            "55038125-4da9-40f6-98ed-adb44c27a8e5",
            "2f048898-aba2-475c-871e-953226c17820"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
          "title": "Should multiply the parameters passed to it and return the product as a result",
          "fullFile": "F:\\My HomeTasks EPAM AM\\EPAM-RD3\\Common\\hometask_22_unit_testing\\homework\\Maria-Ulyanova\\test\\specs\\calculatorMultiply.spec.js",
          "file": "\\test\\specs\\calculatorMultiply.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Should multiply the parameters passed to it and return the product as a result\"",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result \"before each\" hook in \"Should multiply the parameters passed to it and return the product as a result\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = new Calculator();",
              "err": {},
              "uuid": "374159ae-a1e4-4f0e-aca7-e263d7d8be58",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Should multiply the parameters passed to it and return the product as a result\"",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result \"after each\" hook in \"Should multiply the parameters passed to it and return the product as a result\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = null;",
              "err": {},
              "uuid": "b9aa9e5d-edb1-40a1-8078-5f6ca9faef25",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return 8 when called with numbers 2 and 4",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 8 when called with numbers 2 and 4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(2, 4)).to.equal(8);",
              "err": {},
              "uuid": "b0aa550b-5066-4d6d-b80f-b0b1998bd10d",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return -6 when called with numbers -2 and 3",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return -6 when called with numbers -2 and 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(-2, 3)).to.equal(-6);",
              "err": {},
              "uuid": "5b80298a-5c34-4905-991a-d6949e221752",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 when called with number 0",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 0 when called with number 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(0)).to.equal(0);",
              "err": {},
              "uuid": "5b7a0858-f6fe-49bd-bce2-783622133536",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 when called with numbers 1, 1, and 1",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 1 when called with numbers 1, 1, and 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(1, 1, 1)).to.equal(1);",
              "err": {},
              "uuid": "b9061c48-b6cd-470b-8a98-b2aec6174b45",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when called with non-numeric arguments",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should throw error when called with non-numeric arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculator.multiply(\"2\", 3)).to.throw('Invalid argument: all arguments must be numbers');",
              "err": {},
              "uuid": "0dbfab12-4183-4eb9-be31-9327529b0fbe",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when called with no arguments",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should throw error when called with no arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculator.multiply()).to.throw('No arguments provided');",
              "err": {},
              "uuid": "fb5567af-eeb1-452f-a655-956e7f3fdd5e",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return  144 when multiplying multiple positive numbers 1, 2, 3, 4 ,6",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return  144 when multiplying multiple positive numbers 1, 2, 3, 4 ,6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(1, 2, 3, 4, 6)).to.eql(144);",
              "err": {},
              "uuid": "b31fe005-6f66-41a6-b459-c3b25f8f12b4",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0.000009 when called with 0.01, 0.3, 0.04, 0.5, 0.15",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 0.000009 when called with 0.01, 0.3, 0.04, 0.5, 0.15",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(0.01, 0.3, 0.04, 0.5, 0.15)).to.eql(0.000009);",
              "err": {},
              "uuid": "41561837-e357-4a76-bd68-2b2aa271e7af",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return -18 when called with negative numbers -1, -3, -6",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return -18 when called with negative numbers -1, -3, -6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(-1, -3, -6)).to.be.equal(-18);",
              "err": {},
              "uuid": "acc30f8b-4d94-4839-acdf-51ae89db4d7e",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 when called with 100 zeros",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 0 when called with 100 zeros",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const zeros = Array(100).fill(0);\nexpect(calculator.multiply(...zeros)).to.equal(0);",
              "err": {},
              "uuid": "b2111e74-1225-4357-82d9-30303b5f5968",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 when any number is multiplied by 0",
              "fullTitle": "Should multiply the parameters passed to it and return the product as a result Should return 0 when any number is multiplied by 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbersToTest = [0, 1, -1, 100, -100, 0.5, -0.5];\nnumbersToTest.forEach(number => {\n  expect(calculator.multiply(number, 0)).to.equal(0);\n});",
              "err": {},
              "uuid": "2f79179b-0eab-4a65-a232-f95554ae8c18",
              "parentUUID": "1586d16b-f056-427d-8fed-63f4ccf0ac77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0aa550b-5066-4d6d-b80f-b0b1998bd10d",
            "5b80298a-5c34-4905-991a-d6949e221752",
            "5b7a0858-f6fe-49bd-bce2-783622133536",
            "b9061c48-b6cd-470b-8a98-b2aec6174b45",
            "0dbfab12-4183-4eb9-be31-9327529b0fbe",
            "fb5567af-eeb1-452f-a655-956e7f3fdd5e",
            "b31fe005-6f66-41a6-b459-c3b25f8f12b4",
            "41561837-e357-4a76-bd68-2b2aa271e7af",
            "acc30f8b-4d94-4839-acdf-51ae89db4d7e",
            "b2111e74-1225-4357-82d9-30303b5f5968",
            "2f79179b-0eab-4a65-a232-f95554ae8c18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}